{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/navbar/login/Login.tsx\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN } from './login_query';\n\nfunction formatError(error) {\n  const splitMessage = error === null || error === void 0 ? void 0 : error.message.split(':');\n  const message = splitMessage.length > 1 ? splitMessage[1] : splitMessage[0];\n  return message.trim();\n}\n\nfunction Login() {\n  const [login, {\n    error\n  }] = useMutation(LOGIN, {\n    onError: () => {}\n  });\n  return React.createElement(Formik, {\n    initialValues: {\n      name: '',\n      password: ''\n    },\n    onSubmit: values => login({\n      variables: values\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Login\"), error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, formatError(error))));\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/navbar/login/Login.tsx"],"names":["React","Formik","Form","Field","ErrorMessage","useMutation","LOGIN","formatError","error","splitMessage","message","split","length","trim","Login","login","onError","name","password","values","variables"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAAiD;AAC7C,QAAMC,YAAY,GAAGD,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEE,OAAP,CAAeC,KAAf,CAAqB,GAArB,CAArB;AACA,QAAMD,OAAO,GAAID,YAAY,CAACG,MAAb,GAAsB,CAAtB,GAA0BH,YAAY,CAAC,CAAD,CAAtC,GAA4CA,YAAY,CAAC,CAAD,CAAzE;AACA,SAAOC,OAAO,CAACG,IAAR,EAAP;AACH;;AAED,SAASC,KAAT,GAAiB;AACb,QAAM,CAAEC,KAAF,EAAS;AAAEP,IAAAA;AAAF,GAAT,IAAuBH,WAAW,CAACC,KAAD,EAAQ;AAC5CU,IAAAA,OAAO,EAAE,MAAM,CAAE;AAD2B,GAAR,CAAxC;AAIA,SACI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAE;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,QAAQ,EAAE;AAArB,KADnB;AAEI,IAAA,QAAQ,EAAGC,MAAD,IAAYJ,KAAK,CAAC;AAACK,MAAAA,SAAS,EAAED;AAAZ,KAAD,CAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,EAMKX,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,WAAW,CAACC,KAAD,CAAlB,CANd,CAJJ,CADJ;AAeH;;AAED,eAAeM,KAAf","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN } from './login_query';\nimport { ApolloError } from 'apollo-boost';\n\nfunction formatError(error: ApolloError): string {\n    const splitMessage = error?.message.split(':');\n    const message =  splitMessage.length > 1 ? splitMessage[1] : splitMessage[0];\n    return message.trim();\n}\n\nfunction Login() {\n    const [ login, { error } ] = useMutation(LOGIN, {\n        onError: () => {},\n    });\n\n    return (\n        <Formik\n            initialValues={{name: '', password: ''}}\n            onSubmit={(values) => login({variables: values})}\n        >\n            <Form>\n                <Field name=\"name\"></Field>\n                <ErrorMessage name=\"name\"></ErrorMessage>\n                <Field type=\"password\" name=\"password\"></Field>\n                <ErrorMessage name=\"password\"></ErrorMessage>\n                <button>Login</button>\n                {error && <span>{formatError(error)}</span>}\n            </Form>\n        </Formik>\n    )\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}