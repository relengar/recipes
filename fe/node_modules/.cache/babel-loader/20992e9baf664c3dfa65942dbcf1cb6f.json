{"ast":null,"code":"import _slicedToArray from \"/Users/dude/Documents/stuff/recipes/fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/dude/Documents/stuff/recipes/fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/shoppingList/view_shopping_list/my_ingredients/MyIngredients.tsx\";\nimport React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core';\nimport { createStyles } from '@material-ui/styles';\nimport { debounce } from 'lodash';\nimport { useMutation, useSubscription } from '@apollo/react-hooks';\nimport { UPDATE_INGREDIENTS, INGREDIENTS_SUBSCRIPTION } from './my_ingredients.query';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: 200\n  }\n}));\n\nfunction processIngredient(ingredient) {\n  const requiredFields = ['amount', 'original', 'id', 'amountFill', 'unit'];\n  return Object.fromEntries(Object.entries(ingredient).filter(([key]) => requiredFields.some(field => field === key)));\n}\n\nfunction getVariables(amountFill, ingredient, userId, listId) {\n  return {\n    variables: {\n      userId,\n      id: listId,\n      ingredients: [_objectSpread({}, processIngredient(ingredient), {\n        amountFill\n      })]\n    }\n  };\n}\n\nfunction mapWsUpdates(ingredients, updates) {\n  if (!(updates === null || updates === void 0 ? void 0 : updates.length)) {\n    return ingredients;\n  }\n\n  return ingredients.map(ingredient => {\n    var _ingredient$update;\n\n    const update = updates.find(({\n      id\n    }) => id === ingredient.id);\n    return (_ingredient$update = _objectSpread({}, ingredient, {}, update)) !== null && _ingredient$update !== void 0 ? _ingredient$update : ingredient;\n  });\n}\n\nfunction MyIngredients({\n  ingredients,\n  listId,\n  userId\n}) {\n  const classes = useStyles();\n\n  const _useMutation = useMutation(UPDATE_INGREDIENTS),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        updateIngredients = _useMutation2[0];\n\n  const _useSubscription = useSubscription(INGREDIENTS_SUBSCRIPTION, {\n    variables: {\n      userId\n    }\n  }),\n        data = _useSubscription.data;\n\n  const update = debounce(updateIngredients, 300);\n  ingredients = mapWsUpdates(ingredients, data === null || data === void 0 ? void 0 : data.shoppingListIngredients);\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, ingredients.map(({\n    id,\n    amount,\n    amountFill,\n    unit,\n    original\n  }, i) => React.createElement(\"li\", {\n    className: \"columns\",\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, original), React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    key: id,\n    marks: [{\n      value: 0,\n      label: `0 ${unit}`\n    }, {\n      value: amount,\n      label: `${amount} ${unit}`\n    }] // value={}\n    ,\n    valueLabelDisplay: \"auto\",\n    className: classes.root,\n    min: 0,\n    max: amount,\n    defaultValue: amountFill,\n    onChangeCommitted: (e, v) => update(getVariables(v, ingredients[i], userId, listId)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, amountFill, \" \", unit))));\n}\n\nexport default MyIngredients;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/shoppingList/view_shopping_list/my_ingredients/MyIngredients.tsx"],"names":["React","Slider","makeStyles","createStyles","debounce","useMutation","useSubscription","UPDATE_INGREDIENTS","INGREDIENTS_SUBSCRIPTION","useStyles","theme","root","width","processIngredient","ingredient","requiredFields","Object","fromEntries","entries","filter","key","some","field","getVariables","amountFill","userId","listId","variables","id","ingredients","mapWsUpdates","updates","length","map","update","find","MyIngredients","classes","updateIngredients","data","shoppingListIngredients","amount","unit","original","i","value","label","e","v"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles, Theme } from '@material-ui/core';\nimport { createStyles } from '@material-ui/styles'\nimport { debounce } from 'lodash'\nimport { useMutation, useSubscription } from '@apollo/react-hooks';\nimport { UPDATE_INGREDIENTS, INGREDIENTS_SUBSCRIPTION } from './my_ingredients.query';\n\ninterface MyIngredientsProps {\n    ingredients: any[];\n    listId: string;\n    userId: string;\n}\n\nconst useStyles = makeStyles((theme?: Theme) =>\n  createStyles({\n    root: {\n      width: 200,\n    },\n  }),\n);\n\nfunction processIngredient(ingredient: any) {\n    const requiredFields = ['amount', 'original', 'id', 'amountFill', 'unit'];\n    return Object.fromEntries(\n        Object.entries(ingredient)\n            .filter(([key]) => requiredFields.some(field => field === key))\n    );\n}\n\nfunction getVariables(amountFill: number, ingredient: any, userId: string, listId: string) {\n    return {\n        variables: {\n            userId,\n            id: listId,\n            ingredients: [{...processIngredient(ingredient), amountFill}],\n        }\n    }\n}\n\nfunction mapWsUpdates(ingredients: any[], updates: any[]) {\n    if (!updates?.length) {\n       return  ingredients;\n    }\n    return ingredients.map(ingredient => {\n        const update = updates.find(({id}) => id === ingredient.id)\n        return { ...ingredient, ...update } ?? ingredient;\n    })\n}\n\nfunction MyIngredients({ ingredients, listId, userId }: MyIngredientsProps) {\n    const classes = useStyles();\n    const [ updateIngredients ] = useMutation(UPDATE_INGREDIENTS);\n    const { data } = useSubscription(INGREDIENTS_SUBSCRIPTION, {\n        variables: { userId },\n    });\n    const update = debounce(updateIngredients, 300);\n    ingredients = mapWsUpdates(ingredients, data?.shoppingListIngredients);\n\n    return (\n        <ul>\n            {ingredients.map(({ id, amount, amountFill, unit, original}: any, i: number) => (\n                <li className=\"columns\" key={i}>\n                    <div className=\"column\">{original}</div>\n                    <div className=\"column\">\n                        <Slider\n                            key={id}\n                            marks={[{value: 0, label: `0 ${unit}`}, {value: amount, label: `${amount} ${unit}`}]}\n                            // value={}\n                            valueLabelDisplay=\"auto\"\n                            className={classes.root}\n                            min={0}\n                            max={amount}\n                            defaultValue={amountFill}\n                            onChangeCommitted={(e, v) => update(getVariables(v as number, ingredients[i], userId, listId))}\n                        />\n                    </div>\n                    <div className=\"column\">{amountFill} {unit}</div>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nexport default MyIngredients;"]},"metadata":{},"sourceType":"module"}