{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/shoppingList/view_shopping_list/my_ingredients/MyIngredients.tsx\";\nimport React from 'react';\nimport { debounce } from 'lodash';\nimport { useMutation, useSubscription } from '@apollo/react-hooks';\nimport { UPDATE_INGREDIENTS } from './my_ingredients.query';\nimport IngredientSlider from './ingredientSlider/IngredientSlider';\nimport { INGREDIENTS_SUBSCRIPTION } from '../view_shopping_list.query';\n\nfunction processIngredient(ingredient) {\n  const requiredFields = ['amount', 'original', 'id', 'amountFill', 'unit'];\n  return Object.fromEntries(Object.entries(ingredient).filter(([key]) => requiredFields.some(field => field === key)));\n}\n\nfunction getVariables(amountFill, ingredient, userId, listId) {\n  return {\n    variables: {\n      userId,\n      id: listId,\n      ingredients: [{ ...processIngredient(ingredient),\n        amountFill\n      }]\n    }\n  };\n}\n\nfunction mapWsUpdates(ingredients, updates) {\n  if (!(updates === null || updates === void 0 ? void 0 : updates.length)) {\n    return ingredients;\n  }\n\n  const resp = ingredients.map(ingredient => {\n    const update = updates.find(({\n      id\n    }) => id === ingredient.id);\n    return update ? { ...ingredient,\n      ...update\n    } : ingredient;\n  });\n  return resp;\n}\n\nfunction MyIngredients({\n  ingredients,\n  listId,\n  userId\n}) {\n  const [updateIngredients] = useMutation(UPDATE_INGREDIENTS);\n  const update = debounce(updateIngredients, 300);\n  const {\n    data: socketData\n  } = useSubscription(INGREDIENTS_SUBSCRIPTION, {\n    variables: {\n      userId\n    }\n  });\n  const myIngredients = mapWsUpdates(ingredients, socketData);\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, Array.from(myIngredients).map(({\n    id,\n    amount,\n    amountFill,\n    unit,\n    original\n  }, i) => React.createElement(\"li\", {\n    className: \"columns\",\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, original), React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(IngredientSlider, {\n    amount: amount,\n    amountFill: amountFill,\n    unit: unit,\n    update: v => update(getVariables(v, myIngredients[i], userId, listId)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, amountFill, \" \", unit))));\n}\n\nexport default MyIngredients;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/shoppingList/view_shopping_list/my_ingredients/MyIngredients.tsx"],"names":["React","debounce","useMutation","useSubscription","UPDATE_INGREDIENTS","IngredientSlider","INGREDIENTS_SUBSCRIPTION","processIngredient","ingredient","requiredFields","Object","fromEntries","entries","filter","key","some","field","getVariables","amountFill","userId","listId","variables","id","ingredients","mapWsUpdates","updates","length","resp","map","update","find","MyIngredients","updateIngredients","data","socketData","myIngredients","Array","from","amount","unit","original","i","v"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { debounce } from 'lodash'\nimport { useMutation, useSubscription } from '@apollo/react-hooks';\nimport { UPDATE_INGREDIENTS } from './my_ingredients.query';\nimport IngredientSlider from './ingredientSlider/IngredientSlider';\nimport { INGREDIENTS_SUBSCRIPTION } from '../view_shopping_list.query';\n\ninterface MyIngredientsProps {\n    ingredients: any[];\n    listId: string;\n    userId: string;\n}\n\nfunction processIngredient(ingredient: any) {\n    const requiredFields = ['amount', 'original', 'id', 'amountFill', 'unit'];\n    return Object.fromEntries(\n        Object.entries(ingredient)\n            .filter(([key]) => requiredFields.some(field => field === key))\n    );\n}\n\nfunction getVariables(amountFill: number, ingredient: any, userId: string, listId: string) {\n    return {\n        variables: {\n            userId,\n            id: listId,\n            ingredients: [{...processIngredient(ingredient), amountFill}],\n        }\n    }\n}\n\nfunction mapWsUpdates(ingredients: any[], updates: any[]) {\n    if (!updates?.length) {\n       return  ingredients;\n    }\n    const resp = ingredients.map(ingredient => {\n        const update = updates.find(({id}) => id === ingredient.id)\n        return update ? { ...ingredient, ...update } : ingredient;\n    })\n    return resp;\n}\n\nfunction MyIngredients({ ingredients, listId, userId }: MyIngredientsProps) {\n    const [ updateIngredients ] = useMutation(UPDATE_INGREDIENTS);\n    const update = debounce(updateIngredients, 300);\n\n    const { data: socketData } = useSubscription(INGREDIENTS_SUBSCRIPTION, {\n        variables: { userId },\n    });\n\n    const myIngredients = mapWsUpdates(ingredients, socketData);\n\n    return (\n        <ul>\n            {Array.from(myIngredients).map(({ id, amount, amountFill, unit, original}: any, i: number) => (\n                <li className=\"columns\" key={i}>\n                    <div className=\"column\">{original}</div>\n                    <div className=\"column\">\n                        <IngredientSlider\n                            amount={amount}\n                            amountFill={amountFill}\n                            unit={unit}\n                            update={v => update(getVariables(v as number, myIngredients[i], userId, listId))}\n                        />\n                    </div>\n                    <div className=\"column\">{amountFill} {unit}</div>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nexport default MyIngredients;"]},"metadata":{},"sourceType":"module"}