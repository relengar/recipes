{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/recipe/recipe_search/RecipeSearch.tsx\";\nimport React from 'react';\nimport RecipesByIngredient from './recipes_by_ingredient/RecipesByIngredient';\nimport './RecipeSearch.css';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik } from 'formik';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CACHED_INPUT, SET_CACHE, AUTOCOMPLETE, SEARCH } from './queries';\nconst DEFAULT_INGREDIENT_OPTIONS = ['eggs', 'ham', 'milk'];\n\nfunction setOptions(loading, variables, data) {\n  if (loading) {\n    return [];\n  } else if (data && data.predictIngredient.length > 0) {\n    return data.predictIngredient.map(({\n      name\n    }) => name);\n  }\n\n  if (variables) {\n    return variables.query.length > 0 ? [] : DEFAULT_INGREDIENT_OPTIONS;\n  }\n\n  return DEFAULT_INGREDIENT_OPTIONS;\n}\n\nfunction RecipeSearch() {\n  const {\n    data\n  } = useQuery(GET_CACHED_INPUT, {\n    onCompleted: cache => {\n      var _cache$ingredients;\n\n      return (cache === null || cache === void 0 ? void 0 : (_cache$ingredients = cache.ingredients) === null || _cache$ingredients === void 0 ? void 0 : _cache$ingredients.length) > 0 && search({\n        variables: {\n          ingredients: cache === null || cache === void 0 ? void 0 : cache.ingredients\n        }\n      });\n    }\n  });\n  const [predict, {\n    data: ingredients,\n    loading,\n    variables\n  }] = useLazyQuery(AUTOCOMPLETE);\n  const [search, {\n    loading: loadingRecipes,\n    data: recipes,\n    error,\n    called\n  }] = useLazyQuery(SEARCH, {\n    onCompleted: () => {\n      updateCache({\n        variables: formik.values\n      });\n    }\n  });\n  const [updateCache] = useMutation(SET_CACHE);\n  const formik = useFormik({\n    initialValues: {\n      ingredients: data === null || data === void 0 ? void 0 : data.ingredients\n    },\n    onSubmit: values => {\n      search({\n        variables: values\n      });\n    }\n  });\n  return React.createElement(\"section\", {\n    className: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Search for recipes by Ingredients\"), React.createElement(\"div\", {\n    className: \"columns is-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column is-one-third\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    onChange: (_, value) => formik.setFieldValue('ingredients', value),\n    id: \"ingredient\",\n    disableClearable: true,\n    multiple: true,\n    value: formik.values.ingredients ? formik.values.ingredients : [],\n    filterOptions: options => options.filter(option => !formik.values.ingredients || !formik.values.ingredients.some(o => o === option)),\n    options: setOptions(loading, variables, ingredients),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      onChange: ({\n        target\n      }) => predict({\n        variables: {\n          query: target.value\n        }\n      }),\n      id: \"ingredients\",\n      label: \"Ingredients\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: { ...params.InputProps,\n        type: 'search'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })),\n    renderOption: option => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"ingredients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, option)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: \"has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button is-medium is-fullwidth is-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Search\"))))), React.createElement(RecipesByIngredient, {\n    loading: loadingRecipes,\n    data: recipes,\n    error: error,\n    called: called,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n}\n\nexport default RecipeSearch;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/recipe/recipe_search/RecipeSearch.tsx"],"names":["React","RecipesByIngredient","Autocomplete","TextField","useFormik","useQuery","useLazyQuery","useMutation","GET_CACHED_INPUT","SET_CACHE","AUTOCOMPLETE","SEARCH","DEFAULT_INGREDIENT_OPTIONS","setOptions","loading","variables","data","predictIngredient","length","map","name","query","RecipeSearch","onCompleted","cache","ingredients","search","predict","loadingRecipes","recipes","error","called","updateCache","formik","values","initialValues","onSubmit","handleSubmit","_","value","setFieldValue","options","filter","option","some","o","params","target","InputProps","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport RecipesByIngredient from './recipes_by_ingredient/RecipesByIngredient';\nimport './RecipeSearch.css'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { NavLink } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CACHED_INPUT, SET_CACHE, AUTOCOMPLETE, SEARCH } from './queries'\n\nconst DEFAULT_INGREDIENT_OPTIONS = [\n    'eggs',\n    'ham',\n    'milk',\n];\n\nfunction setOptions(\n    loading: boolean,\n    variables: { query: string },\n    data: { predictIngredient: { name: string }[] }\n): string[] {\n     if (loading) {\n        return [];\n    } else if (data && data.predictIngredient.length > 0) {\n        return data.predictIngredient.map(({name}) => name);\n    }\n    if (variables) {\n        return variables.query.length > 0 ? []: DEFAULT_INGREDIENT_OPTIONS;\n    }\n    return DEFAULT_INGREDIENT_OPTIONS;\n}\n\nfunction RecipeSearch() {\n    const { data } = useQuery(GET_CACHED_INPUT, {\n        onCompleted: cache => cache?.ingredients?.length > 0 && search({variables: { ingredients: cache?.ingredients }})\n    })\n    const [ predict, { data: ingredients, loading, variables } ] = useLazyQuery(AUTOCOMPLETE);\n    const [ search, { loading: loadingRecipes, data: recipes, error, called } ] = useLazyQuery(SEARCH, {\n        onCompleted: () => {\n            updateCache({ variables: formik.values});\n        }\n    });\n    const [ updateCache ] = useMutation(SET_CACHE);\n\n    const formik = useFormik({\n        initialValues: {\n          ingredients: data?.ingredients as string[],\n        },\n        onSubmit: values => {\n            search({variables: values})\n        },\n    });\n\n    return (\n        <section className=\"section\">\n            <h1 className=\"title has-text-centered\">Search for recipes by Ingredients</h1>\n            <div className=\"columns is-centered\">\n                <div className=\"column is-one-third\">\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"\">\n                            <Autocomplete\n                                onChange={(_, value: string[]) => formik.setFieldValue('ingredients', value)}\n                                id=\"ingredient\"\n                                disableClearable\n                                multiple\n                                value={formik.values.ingredients ? formik.values.ingredients : []}\n                                filterOptions={options => options.filter(option => !formik.values.ingredients || !formik.values.ingredients.some(o => o === option))}\n                                options={setOptions(loading, (variables as { query: string }), ingredients)}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        onChange={({target}) => predict({ variables: { query: target.value } })}\n                                        id=\"ingredients\"\n                                        label=\"Ingredients\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        InputProps={{ ...params.InputProps, type: 'search' }}\n                                    ></TextField>\n                                )}\n                                renderOption={(option: any) => (\n                                    <React.Fragment>\n                                        <div id=\"ingredients\">{option}</div>\n                                    </React.Fragment>\n                                )}\n                            />\n                        </div>\n                        <p className=\"has-text-centered\">\n                            <button type=\"submit\" className=\"button is-medium is-fullwidth is-info\">Search</button>\n                        </p>\n                    </form>\n                </div>\n            </div>\n            <RecipesByIngredient\n                loading={loadingRecipes}\n                data={recipes}\n                error={error}\n                called={called}\n            />\n        </section>\n    )\n}\n\nexport default RecipeSearch;\n"]},"metadata":{},"sourceType":"module"}