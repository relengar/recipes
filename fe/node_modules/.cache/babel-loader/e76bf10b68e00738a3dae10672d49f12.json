{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/navbar/authModule/AuthModule.tsx\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { AuthType } from '../navbar.model';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SIGNUP, LOGIN } from './auth_module_query';\nimport { formatError } from '../../util/helpers/formatError';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nfunction onError(err) {\n  console.log(err);\n}\n\nfunction getText(authType) {\n  switch (authType) {\n    case AuthType.LOGIN:\n      return 'Log In';\n\n    case AuthType.SIGNUP:\n      return 'Sign Up';\n\n    default:\n      return '';\n  }\n}\n\nfunction AuthModule({\n  loadUser,\n  authType\n}) {\n  const [open, setOpen] = React.useState(false);\n  const options = {\n    onCompleted: () => {\n      loadUser();\n      setOpen(false);\n    },\n    onError\n  };\n  const [signup, {\n    error: regError\n  }] = useMutation(SIGNUP, options);\n  const [login, {\n    error: logError\n  }] = useMutation(LOGIN, options);\n\n  const call = async (type, config) => {\n    console.log(type);\n\n    switch (type) {\n      case AuthType.LOGIN:\n        return await login(config);\n\n      case AuthType.SIGNUP:\n        return await signup(config);\n    }\n  };\n\n  const error = regError !== null && regError !== void 0 ? regError : logError;\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => setOpen(true),\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, getText(authType)), React.createElement(Dialog, {\n    onClose: () => setOpen(false),\n    open: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: {\n      name: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      await call(authType, {\n        variables: values\n      });\n      setSubmitting(false);\n    },\n    validate: values => {\n      const required = ['name', 'password'];\n      const errors = Object.entries(values).filter(([key, val]) => required.some(r => r === key && val === '')).map(([key]) => [key, 'This field is required']);\n      return Object.fromEntries(errors);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, ({\n    isSubmitting\n  }) => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Username\"), React.createElement(Field, {\n    placeholder: \"enter username\",\n    className: \"input\",\n    name: \"name\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"has-text-danger\",\n    name: \"name\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Password\"), React.createElement(Field, {\n    placeholder: \"type password\",\n    className: \"input\",\n    name: \"password\",\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"has-text-danger\",\n    name: \"password\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button is-success is-fullwidth\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, getText(authType)), error && React.createElement(\"div\", {\n    className: \"has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"help is-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, formatError(error))))))));\n}\n\nexport default AuthModule;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/navbar/authModule/AuthModule.tsx"],"names":["React","Formik","Form","Field","ErrorMessage","AuthType","useMutation","SIGNUP","LOGIN","formatError","Dialog","DialogContent","onError","err","console","log","getText","authType","AuthModule","loadUser","open","setOpen","useState","options","onCompleted","signup","error","regError","login","logError","call","type","config","name","password","values","setSubmitting","variables","required","errors","Object","entries","filter","key","val","some","r","map","fromEntries","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { AuthType } from '../navbar.model';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SIGNUP, LOGIN } from './auth_module_query';\nimport { formatError } from '../../util/helpers/formatError';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { OperationVariables } from 'apollo-boost';\n\ntype AuthProps = {\n    loadUser: () => void,\n    authType: AuthType,\n}\n\nfunction onError(err) {console.log(err)}\n\nfunction getText(authType: AuthType): string {\n    switch (authType) {\n        case AuthType.LOGIN:\n            return 'Log In';\n        case AuthType.SIGNUP:\n            return 'Sign Up';\n        default:\n            return '';\n    }\n}\n\nfunction AuthModule({ loadUser, authType }: AuthProps) {\n    const [ open, setOpen ] = React.useState(false);\n    const options = {\n        onCompleted: () => {\n            loadUser()\n            setOpen(false)\n        },\n        onError\n    }\n    const [ signup, { error: regError } ] = useMutation(SIGNUP, options);\n    const [ login, { error: logError } ] = useMutation(LOGIN, options);\n    const call =  async (type: AuthType, config: { variables: OperationVariables }) => {\n        console.log(type);\n        switch (type) {\n            case AuthType.LOGIN:\n                return await login(config);\n            case AuthType.SIGNUP:\n                return await signup(config);\n        }\n    } \n\n    const error = regError ?? logError;\n\n    return (\n        <>\n            <button onClick={() => setOpen(true)} className=\"button\">{getText(authType)}</button>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogContent>\n                    <Formik\n                        initialValues={{ name: '', password: ''}}\n                        onSubmit={async (values, { setSubmitting }) => {\n                            await call(authType, {variables: values});\n                            setSubmitting(false);\n                        }}\n                        validate={(values) => {\n                            const required = ['name', 'password'];\n                            const errors = Object.entries(values)\n                                .filter(([key, val]) => required.some(r => r === key && val === ''))\n                                .map(([key]) => ([key, 'This field is required']))\n                            return Object.fromEntries(errors);\n                        }}\n                    >\n                        {({isSubmitting}) => (\n                            <Form>\n                                <div className=\"field\">\n                                    <label className=\"label\">Username</label>\n                                    <Field placeholder=\"enter username\" className=\"input\" name=\"name\" type=\"text\"></Field>\n                                    <ErrorMessage className=\"has-text-danger\" name=\"name\" component=\"div\"></ErrorMessage>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Password</label>\n                                    <Field placeholder=\"type password\" className=\"input\" name=\"password\" type=\"password\"></Field>\n                                    <ErrorMessage className=\"has-text-danger\" name=\"password\" component=\"div\"></ErrorMessage>\n                                </div>\n                                <button type=\"submit\" className=\"button is-success is-fullwidth\" disabled={isSubmitting}>\n                                    {getText(authType)}\n                                </button>\n                                {\n                                    error &&\n                                    <div className=\"has-text-centered\">\n                                        <p className=\"help is-danger\">{formatError(error)}</p>\n                                    </div>\n                                }\n                            </Form>\n                        )}\n                    </Formik>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}