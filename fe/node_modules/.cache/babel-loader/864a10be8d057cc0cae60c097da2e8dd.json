{"ast":null,"code":"import _objectSpread from \"/Users/dude/Documents/stuff/recipes/fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/dude/Documents/stuff/recipes/fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dude/Documents/stuff/recipes/fe/src/components/recipe/recipe_search/RecipeSearch.tsx\";\nimport React from 'react';\nimport RecipesByIngredient from './recipes_by_ingredient/RecipesByIngredient';\nimport './RecipeSearch.css';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { NavLink } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CACHED_INPUT, SET_CACHE, AUTOCOMPLETE, SEARCH } from './queries';\nconst DEFAULT_INGREDIENT_OPTIONS = ['eggs', 'ham', 'milk'];\n\nfunction setOptions(loading, variables, data) {\n  if (loading) {\n    return [];\n  } else if (data && data.predictIngredient.length > 0) {\n    return data.predictIngredient.map(({\n      name\n    }) => name);\n  }\n\n  if (variables) {\n    return variables.query.length > 0 ? [] : DEFAULT_INGREDIENT_OPTIONS;\n  }\n\n  return DEFAULT_INGREDIENT_OPTIONS;\n}\n\nfunction RecipeSearch() {\n  const _useQuery = useQuery(GET_CACHED_INPUT, {\n    onCompleted: ({\n      ingredients\n    }) => ingredients.length > 0 && search({\n      variables: {\n        ingredients\n      }\n    })\n  }),\n        data = _useQuery.data;\n\n  const _useLazyQuery = useLazyQuery(AUTOCOMPLETE),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        predict = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        ingredients = _useLazyQuery2$.data,\n        loading = _useLazyQuery2$.loading,\n        variables = _useLazyQuery2$.variables;\n\n  const _useLazyQuery3 = useLazyQuery(SEARCH, {\n    onCompleted: () => {\n      updateCache({\n        variables: formik.values\n      });\n    }\n  }),\n        _useLazyQuery4 = _slicedToArray(_useLazyQuery3, 2),\n        search = _useLazyQuery4[0],\n        _useLazyQuery4$ = _useLazyQuery4[1],\n        loadingRecipes = _useLazyQuery4$.loading,\n        recipes = _useLazyQuery4$.data,\n        error = _useLazyQuery4$.error,\n        called = _useLazyQuery4$.called;\n\n  const _useMutation = useMutation(SET_CACHE),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        updateCache = _useMutation2[0];\n\n  const formik = useFormik({\n    initialValues: {\n      ingredients: data.ingredients\n    },\n    onSubmit: values => {\n      search({\n        variables: values\n      });\n    }\n  });\n  return React.createElement(\"section\", {\n    className: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Home\")), React.createElement(\"h1\", {\n    className: \"title has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Search for recipes by Ingredients\"), React.createElement(\"div\", {\n    className: \"columns is-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column is-one-quarter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    onChange: (_, value) => formik.setFieldValue('ingredients', value),\n    id: \"ingredient\",\n    disableClearable: true,\n    multiple: true,\n    value: formik.values.ingredients ? formik.values.ingredients : [],\n    filterOptions: options => options.filter(option => !formik.values.ingredients || !formik.values.ingredients.some(o => o === option)),\n    options: setOptions(loading, variables, ingredients),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      onChange: ({\n        target\n      }) => predict({\n        variables: {\n          query: target.value\n        }\n      }),\n      id: \"ingredients\",\n      label: \"Ingredients\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })),\n    renderOption: option => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"ingredients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, option)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Search\"))))), React.createElement(RecipesByIngredient, {\n    loading: loadingRecipes,\n    data: recipes,\n    error: error,\n    called: called,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n}\n\nexport default RecipeSearch;","map":{"version":3,"sources":["/Users/dude/Documents/stuff/recipes/fe/src/components/recipe/recipe_search/RecipeSearch.tsx"],"names":["React","RecipesByIngredient","Autocomplete","TextField","NavLink","useFormik","useQuery","useLazyQuery","useMutation","GET_CACHED_INPUT","SET_CACHE","AUTOCOMPLETE","SEARCH","DEFAULT_INGREDIENT_OPTIONS","setOptions","loading","variables","data","predictIngredient","length","map","name","query","RecipeSearch","onCompleted","ingredients","search","predict","updateCache","formik","values","loadingRecipes","recipes","error","called","initialValues","onSubmit","handleSubmit","_","value","setFieldValue","options","filter","option","some","o","params","target","InputProps","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport RecipesByIngredient from './recipes_by_ingredient/RecipesByIngredient';\nimport './RecipeSearch.css'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { NavLink } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CACHED_INPUT, SET_CACHE, AUTOCOMPLETE, SEARCH } from './queries'\n\nconst DEFAULT_INGREDIENT_OPTIONS = [\n    'eggs',\n    'ham',\n    'milk',\n];\n\nfunction setOptions(\n    loading: boolean,\n    variables: { query: string },\n    data: { predictIngredient: { name: string }[] }\n): string[] {\n     if (loading) {\n        return [];\n    } else if (data && data.predictIngredient.length > 0) {\n        return data.predictIngredient.map(({name}) => name);\n    }\n    if (variables) {\n        return variables.query.length > 0 ? []: DEFAULT_INGREDIENT_OPTIONS;\n    }\n    return DEFAULT_INGREDIENT_OPTIONS;\n}\n\nfunction RecipeSearch() {\n    const { data } = useQuery(GET_CACHED_INPUT, {\n        onCompleted: ({ingredients}) => ingredients.length > 0 && search({variables: { ingredients }})\n    })\n    const [ predict, { data: ingredients, loading, variables } ] = useLazyQuery(AUTOCOMPLETE);\n    const [ search, { loading: loadingRecipes, data: recipes, error, called } ] = useLazyQuery(SEARCH, {\n        onCompleted: () => {\n            updateCache({ variables: formik.values});\n        }\n    });\n    const [ updateCache ] = useMutation(SET_CACHE);\n\n    const formik = useFormik({\n        initialValues: {\n          ingredients: data.ingredients as string[],\n        },\n        onSubmit: values => {\n            search({variables: values})\n        },\n    });\n\n    return (\n        <section className=\"section\">\n            <div><NavLink to=\"/\">Home</NavLink></div>\n            <h1 className=\"title has-text-centered\">Search for recipes by Ingredients</h1>\n            <div className=\"columns is-centered\">\n                <div className=\"column is-one-quarter\">\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"\">\n                            <Autocomplete\n                                onChange={(_, value: string[]) => formik.setFieldValue('ingredients', value)}\n                                id=\"ingredient\"\n                                disableClearable\n                                multiple\n                                value={formik.values.ingredients ? formik.values.ingredients : []}\n                                filterOptions={options => options.filter(option => !formik.values.ingredients || !formik.values.ingredients.some(o => o === option))}\n                                options={setOptions(loading, variables, ingredients)}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        onChange={({target}) => predict({ variables: { query: target.value } })}\n                                        id=\"ingredients\"\n                                        label=\"Ingredients\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        InputProps={{ ...params.InputProps, type: 'search' }}\n                                    ></TextField>\n                                )}\n                                renderOption={(option: any) => (\n                                    <React.Fragment>\n                                        <div id=\"ingredients\">{option}</div>\n                                    </React.Fragment>\n                                )}\n                            />\n                        </div>\n                        <p>\n                            <button type=\"submit\" className=\"button\">Search</button>\n                        </p>\n                    </form>\n                </div>\n            </div>\n            <RecipesByIngredient\n                loading={loadingRecipes}\n                data={recipes}\n                error={error}\n                called={called}\n            />\n        </section>\n    )\n}\n\nexport default RecipeSearch;\n"]},"metadata":{},"sourceType":"module"}