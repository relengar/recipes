{"version":3,"sources":["components/navbar/navbar.model.ts","websocketSetup.ts","components/navbar/authModule/AuthModule.tsx","components/util/helpers/formatError.ts","components/navbar/NavBar.tsx","App.tsx","resolvers/recipe.resolvers.ts","serviceWorker.js","index.tsx","components/navbar/authModule/auth_module_query.ts","components/friends/friends.query.ts"],"names":["AuthType","ssl","process","SSL_ENABLED","uri","API_URL_DOMAIN","wsUri","wsLink","WebSocketLink","options","reconnect","httpLink","HttpLink","credentials","link","split","query","definition","getMainDefinition","kind","operation","onError","err","console","log","getText","authType","LOGIN","SIGNUP","AuthModule","loadUser","React","useState","open","setOpen","onCompleted","client","resetStore","useMutation","signup","regError","error","login","logError","call","type","config","a","onClick","className","Dialog","onClose","DialogContent","initialValues","name","password","onSubmit","values","setSubmitting","variables","validate","required","errors","Object","entries","filter","key","val","some","r","map","fromEntries","isSubmitting","placeholder","component","disabled","splitMessage","message","length","trim","formatError","NavBar","useQuery","CURRENT_USER","data","loading","useLazyQuery","lazyData","history","useHistory","LOGOUT","push","logOut","user","currentUser","friends","MY_FREINDS","to","id","myConnections","friend","landingPreload","recipeViewPreload","randomRecipe","friendsList","myShoppingLists","viewShoppingList","recipeSearch","Landing","lazy","RecipeView","RandomRecipe","FriendsList","MyShoppingLists","ViewShoppingList","RecipeSearch","cache","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","writeData","ingredients","ApolloClient","resolvers","Mutation","saveIngredients","_root","App","fallback","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","gql","ALL_USERS","ADD_FRIEND","REMOVE_FIREND"],"mappings":"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","file":"static/js/main.2c4ba8ef.chunk.js","sourcesContent":["export type NavbarAuthProps = {\n    loadUser: () => void,\n}\n\nexport enum AuthType {\n    LOGIN = 'LOGIN',\n    SIGNUP = 'SIGNUP',\n}","import { WebSocketLink } from 'apollo-link-ws';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { getMainDefinition } from 'apollo-utilities';\n\nconst ssl = process.env.SSL_ENABLED ? 's' : '';\nconst uri = process.env.API_URL_DOMAIN ? `http${ssl}://${process.env.API_URL_DOMAIN}/graphql` : 'http://localhost:3000/graphql';\nconst wsUri = process.env.API_URL_DOMAIN ? `ws${ssl}://${process.env.API_URL_DOMAIN}/graphql` : 'ws://localhost:3000/graphql';\n\n\nconst wsLink = new WebSocketLink({\n  uri: wsUri,\n  options: {\n    reconnect: true\n  }\n});\n\nconst httpLink = new HttpLink({\n  uri,\n  credentials: 'include',\n});\n\nexport const link = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n          definition.kind === 'OperationDefinition' &&\n          definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    httpLink,\n);","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { AuthType } from '../navbar.model';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SIGNUP, LOGIN } from './auth_module_query';\nimport { formatError } from '../../util/helpers/formatError';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { OperationVariables } from 'apollo-boost';\n\ntype AuthProps = {\n    loadUser: () => void,\n    authType: AuthType,\n}\n\nfunction onError(err: any): void {console.log(err)}\n\nfunction getText(authType: AuthType): string {\n    switch (authType) {\n        case AuthType.LOGIN:\n            return 'Log In';\n        case AuthType.SIGNUP:\n            return 'Sign Up';\n        default:\n            return '';\n    }\n}\n\nfunction AuthModule({ loadUser, authType }: AuthProps) {\n    const [ open, setOpen ] = React.useState(false);\n    const options = {\n        onCompleted: () => {\n            client?.resetStore();\n            loadUser()\n            setOpen(false)\n        },\n        onError\n    }\n    const [ signup, { error: regError, client } ] = useMutation(SIGNUP, options);\n    const [ login, { error: logError } ] = useMutation(LOGIN, options);\n    const call =  async (type: AuthType, config: { variables: OperationVariables }) => {\n        switch (type) {\n            case AuthType.LOGIN:\n                return await login(config);\n            case AuthType.SIGNUP:\n                return await signup(config);\n        }\n    } \n\n    const error = regError ?? logError;\n\n    return (\n        <>\n            <button onClick={() => setOpen(true)} className=\"button\">{getText(authType)}</button>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogContent>\n                    <Formik\n                        initialValues={{ name: '', password: ''}}\n                        onSubmit={async (values, { setSubmitting }) => {\n                            await call(authType, {variables: values});\n                            setSubmitting(false);\n                        }}\n                        validate={(values) => {\n                            const required = ['name', 'password'];\n                            const errors = Object.entries(values)\n                                .filter(([key, val]) => required.some(r => r === key && val === ''))\n                                .map(([key]) => ([key, 'This field is required']))\n                            return Object.fromEntries(errors);\n                        }}\n                    >\n                        {({isSubmitting}) => (\n                            <Form>\n                                <div className=\"field\">\n                                    <label className=\"label\">Username</label>\n                                    <Field placeholder=\"enter username\" className=\"input\" name=\"name\" type=\"text\"></Field>\n                                    <ErrorMessage className=\"has-text-danger\" name=\"name\" component=\"div\"></ErrorMessage>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Password</label>\n                                    <Field placeholder=\"type password\" className=\"input\" name=\"password\" type=\"password\"></Field>\n                                    <ErrorMessage className=\"has-text-danger\" name=\"password\" component=\"div\"></ErrorMessage>\n                                </div>\n                                <button type=\"submit\" className=\"button is-success is-fullwidth\" disabled={isSubmitting}>\n                                    {getText(authType)}\n                                </button>\n                                {\n                                    error &&\n                                    <div className=\"has-text-centered\">\n                                        <p className=\"help is-danger\">{formatError(error)}</p>\n                                    </div>\n                                }\n                            </Form>\n                        )}\n                    </Formik>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nexport default AuthModule;","import { ApolloError } from 'apollo-boost';\n\nexport function formatError(error: ApolloError): string {\n    const splitMessage = error?.message.split(':');\n    const message =  splitMessage.length > 1 ? splitMessage[1] : splitMessage[0];\n    return message.trim();\n}\n","import React from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport AuthModule from './authModule/AuthModule';\nimport { AuthType } from './navbar.model';\nimport { CURRENT_USER, LOGOUT } from './authModule/auth_module_query';\nimport { MY_FREINDS } from '../friends/friends.query';\n\nfunction NavBar() {\n    const { data, loading, client } = useQuery(CURRENT_USER);\n    const [ loadUser, { data: lazyData }] = useLazyQuery(CURRENT_USER);\n    const history = useHistory()\n    const [ logOut ] = useMutation(LOGOUT, {\n        onCompleted: () => {\n            client.resetStore();\n            history.push('/')\n        },\n    });\n\n    const user = data?.currentUser ?? lazyData?.currentUser;\n    const { data: friends } = useQuery(MY_FREINDS);\n\n    return (\n        <nav className=\"navbar has-background-light\">\n             <div className=\"navbar-menu\">\n                <div className=\"navbar-start\">\n                    <NavLink className=\"navbar-item\" to=\"/\">Home</NavLink>\n                    <NavLink className=\"navbar-item\" to=\"/search\">Search</NavLink>\n                    {\n                        user && \n                        <>\n                            <div className=\"navbar-item has-dropdown is-hoverable\">\n                                <a className=\"navbar-link\">Shopping Lists</a>\n                                <div className=\"navbar-dropdown\">\n                                    <NavLink to={`/shopping-lists/${user.id}`} className=\"navbar-item\">{user.name}&nbsp;<i>(yours)</i></NavLink>\n                                    {\n                                        friends?.myConnections && \n                                        friends.myConnections.map((friend: any) =>\n                                            <NavLink key={friend.id} to={`/shopping-lists/${friend.id}`} className=\"navbar-item\">{friend.name}</NavLink>\n                                        ) \n                                    }\n                                </div>                            \n                            </div>\n                            <NavLink className=\"navbar-item\" to=\"/connections\">Connections</NavLink>\n                        </>\n                    }\n                    <NavLink className=\"navbar-item\" to=\"/random\">Random Recipe</NavLink>\n                </div>\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">{loading && '...loading'}</div>\n                    {\n                        user &&\n                        <>\n                            <div className=\"navbar-item\">{user.name}</div>\n                            <div className=\"navbar-item\"><button className=\"button\" onClick={() => logOut()}>Log Out</button></div>\n                        </>\n                    }\n                    {\n                        !loading && !user &&\n                        <>\n                            <div className=\"navbar-item\"><AuthModule authType={AuthType.LOGIN} loadUser={loadUser} /></div>\n                            <div className=\"navbar-item\"><AuthModule authType={AuthType.SIGNUP} loadUser={loadUser} /></div>\n                        </>\n                    }\n                </div>\n             </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React, { Suspense, lazy } from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { InMemoryCache } from 'apollo-boost';\nimport ApolloClient from 'apollo-client';\nimport { recipe } from './resolvers'\nimport { link } from './websocketSetup'\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport NavBar from './components/navbar/NavBar';\n\nconst landingPreload = import('./components/landing/Landing');\nconst recipeViewPreload = import('./components/recipe/recipe_view/RecipeView');\nconst randomRecipe = import('./components/recipe/random_recipe/RandomRecipe');\nconst friendsList = import('./components/friends/FriendsList');\nconst myShoppingLists = import('./components/shoppingList/my_shopping_lists/MyShoppingLists');\nconst viewShoppingList = import('./components/shoppingList/view_shopping_list/ViewShoppingList');\nconst recipeSearch = import('./components/recipe/recipe_search/RecipeSearch');\n\nconst Landing = lazy(() => landingPreload);\nconst RecipeView = lazy(() => recipeViewPreload);\nconst RandomRecipe = lazy(() => randomRecipe);\nconst FriendsList = lazy(() => friendsList);\nconst MyShoppingLists = lazy(() => myShoppingLists);\nconst ViewShoppingList = lazy(() => viewShoppingList);\nconst RecipeSearch = lazy(() => recipeSearch);\n\nconst cache = new InMemoryCache({\n  fragmentMatcher: new IntrospectionFragmentMatcher({})\n});\nconst init = {\n  data: {\n    ingredients: [],\n  },\n}\ncache.writeData(init);\n\nconst client = new ApolloClient({\n  link,\n  cache,\n  resolvers: recipe,\n\n});\n\nfunction App () {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <NavBar />\n        <Suspense fallback={<section className=\"section\"><div className=\"container has-text-centered\">Loading ... </div></section>}>\n          <Switch>\n            <Route exact path='/' component={Landing} />\n            <Route exact path='/random' component={RandomRecipe} />\n            <Route exact path='/search' component={RecipeSearch} />\n            <Route exact path='/shopping-lists/:userId' component={MyShoppingLists} />\n            <Route exact path='/recipe/:id' component={RecipeView} />\n            <Route exact path='/shopping-list/:id' component={ViewShoppingList} />\n            <Route exact path='/connections' component={FriendsList} />\n          </Switch>\n        </Suspense>\n      </BrowserRouter>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","export default {\n    Mutation: {\n        saveIngredients: <R>(_root: R, {ingredients}: any, { cache }: any) => {\n            // let test = {recipesByIngredients: [\n            //     recipesByIngredients[0],\n            //     recipesByIngredients[1],\n            //     recipesByIngredients[2],\n            //     recipesByIngredients[3],\n            //     // recipesByIngredients[4]\n            // ] }\n            cache.writeData({ data: {ingredients }});\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { gql } from 'apollo-boost';\n\nexport const SIGNUP = gql`\n    mutation SignUp($name: String!, $password: String!) {\n        createUser(password: $password, name: $name) {\n            id\n            name\n        }\n    }\n`\n\nexport const LOGIN = gql`\n    mutation LogIn($name: String!, $password: String!) {\n        logIn(password: $password, name: $name) {\n            id\n            name\n        }\n    }\n`\n\nexport const CURRENT_USER = gql`\n    query CurrentUser {\n        currentUser {\n            id\n            name\n        }\n    }\n`;\n\nexport const LOGOUT= gql`\n    mutation LogOut {\n        logOut\n    }\n`\n","import { gql } from 'apollo-boost';\n\nexport const ALL_USERS = gql`\n    {\n        users {\n            id\n            name\n            friends {\n                id\n        }\n    }\n    }\n`\n\nexport const MY_FREINDS = gql`\n    {\n        myConnections {\n            id\n            name\n        }\n    }\n`\n\nexport const ADD_FRIEND = gql`\n    mutation AddFriend($userId: String!) {\n        addFriend(userId: $userId)\n    }\n`\n\nexport const REMOVE_FIREND = gql`\n    mutation RemoveFriend($userId: String!) {\n        removeFriend(userId: $userId)\n    }\n`"],"sourceRoot":""}