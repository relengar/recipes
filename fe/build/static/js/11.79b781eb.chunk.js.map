{"version":3,"sources":["components/friends/FriendsList.tsx"],"names":["FriendsList","all","useQuery","ALL_USERS","data","MY_FREINDS","friends","client","useMutation","ADD_FRIEND","onCompleted","resetStore","onError","addFreind","REMOVE_FIREND","removeFriend","className","users","filter","u","user","myConnections","find","id","notInFriends","map","key","name","onClick","variables","userId"],"mappings":"8IAwFeA,UAvEf,WAAwB,IAAD,IACLC,EAAQC,YAAqCC,KAAnDC,KADW,EAEeF,YAA6CG,KAAjEC,EAFK,EAEXF,KAAeG,EAFJ,EAEIA,OAFJ,EAGGC,YAAYC,IAAY,CAC1CC,YAAaH,EAAOI,WACpBC,QAAS,eAFLC,EAHW,sBAOML,YAAYM,IAAe,CAChDJ,YAAaH,EAAOI,WACpBC,QAAS,eAFLG,EAPW,oBAYnB,OACI,6BAASC,UAAU,WACf,wBAAIA,UAAU,2BAAd,eACA,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,2CACX,wBAAIA,UAAU,mDAAd,eADJ,OAGQf,QAHR,IAGQA,OAHR,YAGQA,EAAKgB,aAHb,aAGQ,EAAYC,QAAO,SAAAC,GAAC,OA1B5C,SAAsBC,EAAqBd,GACvC,QAAKA,IAAW,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAASe,kBAGnBf,EAAQe,cAAcC,MAAK,qBAAEC,KAA6BH,EAAKG,MAsB3BC,CAAaL,EAAGb,MAAUmB,KAAI,SAACL,GAAD,OAClD,yBAAKJ,UAAU,MAAMU,IAAKN,EAAKG,IAC3B,6BAASP,UAAU,SACf,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cAAcI,EAAKO,OAEtC,yBAAKX,UAAU,eACX,yBAAKA,UAAU,cACX,4BAAQY,QAAS,kBAAMf,EAAU,CAAEgB,UAAW,CAAEC,OAAQV,EAAKG,OAASP,UAAU,qBAChF,gDAWpC,yBAAKA,UAAU,2CACX,wBAAIA,UAAU,mDAAd,oBADJ,OAGQV,QAHR,IAGQA,OAHR,YAGQA,EAASe,qBAHjB,aAGQ,EAAwBI,KAAI,SAACL,GAAD,OACxB,yBAAKJ,UAAU,MAAMU,IAAKN,EAAKG,IAC3B,6BAASP,UAAU,SACf,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cAAcI,EAAKO,OAEtC,yBAAKX,UAAU,eACX,yBAAKA,UAAU,cACX,4BAAQY,QAAS,kBAAMb,EAAa,CAAEc,UAAW,CAAEC,OAAQV,EAAKG,OAASP,UAAU,oBACnF","file":"static/js/11.79b781eb.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { ALL_USERS, ADD_FRIEND, REMOVE_FIREND, MY_FREINDS } from './friends.query';\n\ninterface UserInterface {\n    id: string,\n    name: string,\n    friends: {id: string, name: string}[]\n}\n\nfunction notInFriends(user: UserInterface, friends: any): boolean {\n    if (!friends && ! friends?.myConnections) {\n        return true\n    }\n    return !friends.myConnections.find(({id}: {id: string}) => id === user.id)\n}\n\nfunction FriendsList() {\n    const { data: all } = useQuery<{ users: UserInterface[] }>(ALL_USERS)\n    const { data: friends, client } = useQuery<{ myConnections: UserInterface[] }>(MY_FREINDS);\n    const [ addFreind ] = useMutation(ADD_FRIEND, {\n        onCompleted: client.resetStore,\n        onError: () => {},\n    });\n    const [ removeFriend ] = useMutation(REMOVE_FIREND, {\n        onCompleted: client.resetStore,\n        onError: () => {},\n    });\n\n    return (\n        <section className=\"section\">\n            <h1 className=\"title has-text-centered\">Connections</h1>\n            <div className=\"columns is-centered\">\n                <div className=\"column has-text-centered is-one-quarter\">\n                    <h1 className=\"has-text-weight-bold subtitle has-text-centered\">Other users</h1>\n                    {\n                        all?.users?.filter(u => notInFriends(u, friends)).map((user: any) => \n                            <div className=\"box\" key={user.id}>\n                                <article className=\"media\">\n                                    <div className=\"media-content\">\n                                        <nav className=\"level\">\n                                            <div className=\"level-left\">\n                                                <div className=\"level-item\">{user.name}</div>\n                                            </div>\n                                            <div className=\"level-right\">\n                                                <div className=\"level-item\">\n                                                    <button onClick={() => addFreind({ variables: { userId: user.id } })} className=\"button is-success\">\n                                                    <span>Add</span>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </nav>\n                                    </div>\n                                </article>\n                            </div>\n                        )\n                    }\n                </div>\n                <div className=\"column has-text-centered is-one-quarter\">\n                    <h1 className=\"has-text-weight-bold subtitle has-text-centered\">Your connections</h1>\n                    {\n                        friends?.myConnections?.map((user: any) => \n                            <div className=\"box\" key={user.id}>\n                                <article className=\"media\">\n                                    <div className=\"media-content\">\n                                        <nav className=\"level\">\n                                            <div className=\"level-left\">\n                                                <div className=\"level-item\">{user.name}</div>\n                                            </div>\n                                            <div className=\"level-right\">\n                                                <div className=\"level-item\">\n                                                    <button onClick={() => removeFriend({ variables: { userId: user.id } })} className=\"button is-danger\">\n                                                    <span>Remove</span>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </nav>\n                                    </div>\n                                </article>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default FriendsList;"],"sourceRoot":""}