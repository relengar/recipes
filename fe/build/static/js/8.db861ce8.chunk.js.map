{"version":3,"sources":["components/recipe/recipe_view/recipe_view.query.ts","components/util/helpers/flattenSteps.ts","components/shoppingList/view_shopping_list/view_shopping_list.query.ts","components/shoppingList/view_shopping_list/my_ingredients/my_ingredients.query.ts","components/shoppingList/view_shopping_list/my_ingredients/ingredientSlider/IngredientSlider.tsx","components/shoppingList/view_shopping_list/my_ingredients/MyIngredients.tsx","components/shoppingList/view_shopping_list/ViewShoppingList.tsx"],"names":["GET_RECIPE","gql","flattenSteps","acc","instruction","steps","GET_SHOPPING_LIST","INGREDIENTS_SUBSCRIPTION","UPDATE_INGREDIENTS","useStyles","makeStyles","theme","createStyles","root","width","IngredientSlider","amount","amountFill","unit","update","classes","Slider","marks","value","label","valueLabelDisplay","className","min","max","defaultValue","onChangeCommitted","e","v","processIngredient","ingredient","requiredFields","Object","fromEntries","entries","filter","key","some","field","MyIngredients","ingredientsInput","ingredients","listId","userId","useMutation","updateIngredients","debounce","useSubscription","variables","onSubscriptionData","subscriptionData","setIngredeints","updates","length","map","find","id","forceRender","Date","getTime","mapIngredientUpdates","data","shoppingListIngredients","React","useState","Array","from","i","original","getVariables","ViewShoppingList","useParams","useLazyQuery","getRecipe","recipeData","loadingRecipe","loading","user","useQuery","CURRENT_USER","onCompleted","recipeId","getShoppingListById","currentUser","shoppingList","recipe","recipeById","CircularProgress","recipeTitle","href","src","image","alt","title","analyzedInstructions","reduce","step"],"mappings":"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","file":"static/js/8.db861ce8.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const GET_RECIPE = gql`\n    query GetRecipeById($recipeId: Int!) {\n        recipeById(recipeId: $recipeId) {\n            title\n            image\n            analyzedInstructions {\n                steps {\n                    step\n                }\n            }\n            extendedIngredients {\n                id\n                original\n                amount\n                unit\n            }\n        }\n    }\n`","interface Instruction {\n    steps: string[];\n}\n\nexport function flattenSteps(acc: Instruction[], instruction: Instruction) {\n    return [...acc, ...instruction.steps]\n}\n","\nimport { gql } from 'apollo-boost';\n\nexport const GET_SHOPPING_LIST = gql`\n    query getList($id: String!) {\n        getShoppingListById(id: $id) {\n            id\n            recipeId\n            recipeTitle\n            ingredients {\n                id\n                original\n                amount\n                amountFill\n                unit\n            }\n        }\n    }\n`\n\nexport const INGREDIENTS_SUBSCRIPTION = gql`\n  subscription ShoppingListIngredients($userId: String!) {\n    shoppingListIngredients(userId: $userId) {\n        id\n        original\n        amountFill\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const UPDATE_INGREDIENTS = gql`\n    mutation UpdateIngredients(\n        $ingredients: [IngredientInput!]!\n        $id: String!\n    ) {\n        updateShoppingList(\n            ingredients: $ingredients\n            id: $id\n        ) {\n            ingredients {\n                id\n                original\n                amount\n                amountFill\n                unit\n            }\n        }\n    }\n`\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles, Theme } from '@material-ui/core';\nimport { createStyles } from '@material-ui/styles'\n\ntype IngredientSliderProps = {\n    amount: number,\n    amountFill: number,\n    unit: string,\n    update: (amount: number) => void,\n}\n\nconst useStyles = makeStyles((theme?: Theme) =>\n  createStyles({\n    root: {\n      width: 200,\n    },\n  }),\n);\n\nfunction IngredientSlider({ amount, amountFill, unit, update }: IngredientSliderProps) {\n    const classes = useStyles();\n\n    return (\n        <Slider\n            marks={[{value: 0, label: `0 ${unit}`}, {value: amount, label: `${amount} ${unit}`}]}\n            valueLabelDisplay=\"auto\"\n            className={classes.root}\n            min={0}\n            max={amount}\n            defaultValue={amountFill}\n            onChangeCommitted={(e, v) => {\n                update(v as number);\n            }}\n        />\n    );\n}\n\nexport default IngredientSlider;","import React from 'react';\nimport { debounce } from 'lodash'\nimport { useMutation, useSubscription } from '@apollo/react-hooks';\nimport { UPDATE_INGREDIENTS } from './my_ingredients.query';\nimport IngredientSlider from './ingredientSlider/IngredientSlider';\nimport { INGREDIENTS_SUBSCRIPTION } from '../view_shopping_list.query';\n\ninterface MyIngredientsProps {\n    ingredients: any[];\n    listId: string;\n    userId: string;\n}\n\nfunction processIngredient(ingredient: any) {\n    const requiredFields = ['amount', 'original', 'id', 'amountFill', 'unit'];\n    return Object.fromEntries(\n        Object.entries(ingredient)\n            .filter(([key]) => requiredFields.some(field => field === key))\n    );\n}\n\nfunction getVariables(amountFill: number, ingredient: any, userId: string, listId: string) {\n    return {\n        variables: {\n            userId,\n            id: listId,\n            ingredients: [{...processIngredient(ingredient), amountFill}],\n        }\n    }\n}\n\nfunction mapIngredientUpdates(ingredients: any[], updates: any[]) {\n    if (!updates?.length) {\n       return  ingredients;\n    }\n    const resp = ingredients.map(ingredient => {\n        const update = updates.find(({id}) => id === ingredient.id)\n        return {\n            ...ingredient,\n            ...update,\n            forceRender: update ? new Date().getTime() : 0,\n        };\n    })\n    return resp;\n}\n\nfunction MyIngredients({ ingredients: ingredientsInput, listId, userId }: MyIngredientsProps) {\n    const [ updateIngredients ] = useMutation(UPDATE_INGREDIENTS);\n    const update = debounce(updateIngredients, 300);\n\n    useSubscription(INGREDIENTS_SUBSCRIPTION, {\n        variables: { userId },\n        onSubscriptionData: ({ subscriptionData }: any) => {\n            setIngredeints(mapIngredientUpdates(ingredientsInput, subscriptionData.data.shoppingListIngredients))\n        }\n    });\n\n    const [ ingredients, setIngredeints ] = React.useState(ingredientsInput)\n\n    return (\n        <ul>\n            {Array.from(ingredients).map(({ amount, amountFill, unit, original, forceRender}: any, i: number) => (\n                <li className=\"columns\" key={i + (forceRender ?? 0)}>\n                    <div className=\"column\">{original}: {amountFill}</div>\n                    <div className=\"column\">\n                        <IngredientSlider\n                            amount={amount}\n                            amountFill={amountFill}\n                            unit={unit}\n                            update={v => update(getVariables(v as number, ingredients[i], userId, listId))}\n                        />\n                    </div>\n                    <div className=\"column\">{amountFill} {unit}</div>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nexport default MyIngredients;","import React from 'react';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { GET_SHOPPING_LIST } from './view_shopping_list.query';\nimport { useParams } from 'react-router-dom';\nimport { GET_RECIPE } from '../../recipe/recipe_view/recipe_view.query';\nimport { flattenSteps } from '../../util/helpers/flattenSteps';\nimport { CircularProgress } from '@material-ui/core';\nimport MyIngredients from './my_ingredients/MyIngredients';\nimport './ViewShoppingList.css'\nimport { CURRENT_USER } from '../../navbar/authModule/auth_module_query';\n\nfunction ViewShoppingList() {\n    const { id } = useParams();\n    const [ getRecipe, { data: recipeData, loading: loadingRecipe } ] = useLazyQuery(GET_RECIPE)\n    const { data: user } = useQuery(CURRENT_USER);\n    const { data, loading } = useQuery(GET_SHOPPING_LIST, {\n        variables: { id },\n        onCompleted: ({getShoppingListById: { recipeId }}) => getRecipe({variables: { recipeId }})\n    });\n    const userId = user?.currentUser.id\n\n    const shoppingList = data?.getShoppingListById;\n    const recipe = recipeData?.recipeById;\n\n    return (\n        <section className=\"section\">\n            {loading && <div className=\"container has-text-centered\"><CircularProgress /></div>}\n            {\n                shoppingList &&\n                <>\n                    <h1 className=\"title has-text-centered\">{shoppingList.recipeTitle}</h1>\n                    <div className=\"columns\">\n                        <div className=\"column has-text-centered\"><a href=\"#recipe-instructions\">Recipe instructions</a></div>\n                    </div>\n                    <div className=\"columns is-two-thirds is-centered\">\n                        <MyIngredients\n                            userId={userId}\n                            ingredients={shoppingList.ingredients}\n                            listId={shoppingList.id}\n                        />\n                    </div>\n                    <div className=\"container\">\n                        {loadingRecipe && <div className=\"container has-text-centered\"><CircularProgress /></div>}\n                        {\n                            recipe &&\n                            <>\n                                <div className=\"columns is-centered\">\n                                    <img className=\"is-one-quarter\" src={recipe.image} alt={recipe.title}/>\n                                </div>\n                                <div id=\"recipe-instructions\" className=\"container\">\n                                    {\n                                        recipe.analyzedInstructions\n                                            .reduce(flattenSteps, [])\n                                            .map(({step}: {step: string}, i: number) => (\n                                            <div key={i} className=\"instruction box has-text-centered\">{step}</div>\n                                        ))\n                                    }\n                                </div>\n                            </>\n                        }\n                    </div>\n                </>\n            }\n        </section>\n    );\n}\n\nexport default ViewShoppingList;"],"sourceRoot":""}