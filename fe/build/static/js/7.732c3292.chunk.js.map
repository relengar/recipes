{"version":3,"sources":["components/recipe/recipe_search/recipes_by_ingredient/RecipesByIngredient.tsx","components/recipe/recipe_search/queries.ts","components/recipe/recipe_search/RecipeSearch.tsx"],"names":["renderIngredients","title","ingredientList","length","className","map","i","original","key","RecipesByIngredient","called","loading","data","error","CircularProgress","size","recipesByIngredients","id","missedIngredients","usedIngredients","to","GET_CACHED_INPUT","gql","AUTOCOMPLETE","SET_CACHE","SEARCH","DEFAULT_INGREDIENT_OPTIONS","setOptions","variables","predictIngredient","name","query","RecipeSearch","useQuery","onCompleted","cache","ingredients","search","useLazyQuery","predict","updateCache","formik","values","loadingRecipes","recipes","useMutation","useFormik","initialValues","onSubmit","handleSubmit","Autocomplete","onChange","_","value","setFieldValue","disableClearable","multiple","filterOptions","options","filter","option","some","o","renderInput","params","TextField","target","label","margin","variant","fullWidth","InputProps","type","renderOption","Fragment"],"mappings":"0MAcA,SAASA,EAAkBC,EAAeC,GACtC,OAAOA,EAAeC,OAAS,GAC3B,yBAAKC,UAAU,6BACf,gCAASH,GACT,4BAAKC,EAAeG,KAAI,WAAaC,GAAb,IAAEC,EAAF,EAAEA,SAAF,OAAmB,wBAAIC,IAAKF,GAAG,2BAAIC,SAKpD,SAASE,EAAT,GAA0F,IAA3DC,EAA0D,EAA1DA,OAAQC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MACjE,OACI,yBAAKT,UAAU,+BACbM,GAAUC,GAAW,kBAACG,EAAA,EAAD,CAAkBC,KAAM,KAE3CH,GAAQA,EAAKI,qBAAqBb,OAAS,IAAMQ,IAAYE,GAC7D,6BAAMD,EAAKI,qBAAqBX,KAAI,WAAyDC,GAAe,IAArEW,EAAoE,EAApEA,GAAIhB,EAAgE,EAAhEA,MAAOiB,EAAyD,EAAzDA,kBAAmBC,EAAsC,EAAtCA,gBACjE,OACI,yBAAKX,IAAKF,EAAGF,UAAU,uBACnB,yBAAKA,UAAU,qDACX,4BAAQA,UAAU,gCACd,kBAAC,IAAD,CAASA,UAAU,YAAYgB,GAAE,kBAAaH,IAAOhB,IAEzD,yBAAKG,UAAU,gBACVJ,EAAkB,mBAAoBmB,GACtCnB,EAAkB,qBAAsBkB,W,+6BCpClE,IAAMG,EAAmBC,YAAH,KAMhBC,EAAeD,YAAH,KAQZE,EAAYF,YAAH,KAQTG,EAASH,YAAH,KCdbI,EAA6B,CAC/B,OACA,MACA,QAGJ,SAASC,EACLhB,EACAiB,EACAhB,GAEC,OAAID,EACM,GACAC,GAAQA,EAAKiB,kBAAkB1B,OAAS,EACxCS,EAAKiB,kBAAkBxB,KAAI,qBAAEyB,QAEpCF,GACOA,EAAUG,MAAM5B,OAAS,EAAI,GAEjCuB,EA0EIM,UAvEf,WAAyB,IACbpB,EAASqB,YAASZ,EAAkB,CACxCa,YAAa,SAAAC,GAAK,aAAS,OAALA,QAAK,IAALA,OAAA,YAAAA,EAAOC,mBAAP,eAAoBjC,QAAS,GAAKkC,EAAO,CAACT,UAAW,CAAEQ,YAAW,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,kBAD7FxB,KADY,EAI2C0B,YAAaf,GAJxD,mBAIZgB,EAJY,YAIKH,EAJL,EAIDxB,KAAmBD,EAJlB,EAIkBA,QAASiB,EAJ3B,EAI2BA,UAJ3B,EAK0DU,YAAab,EAAQ,CAC/FS,YAAa,WACTM,EAAY,CAAEZ,UAAWa,EAAOC,YAPpB,mBAKZL,EALY,YAKOM,EALP,EAKFhC,QAA+BiC,EAL7B,EAKuBhC,KAAeC,EALtC,EAKsCA,MAAOH,EAL7C,EAK6CA,OAL7C,EAUImC,YAAYrB,GAA5BgB,EAVY,oBAYdC,EAASK,YAAU,CACrBC,cAAe,CACbX,YAAW,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,aAErBY,SAAU,SAAAN,GACNL,EAAO,CAACT,UAAWc,OAI3B,OACI,6BAAStC,UAAU,WACf,wBAAIA,UAAU,2BAAd,qCACA,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBACX,0BAAM4C,SAAUP,EAAOQ,cACnB,yBAAK7C,UAAU,IACX,kBAAC8C,EAAA,EAAD,CACIC,SAAU,SAACC,EAAGC,GAAJ,OAAwBZ,EAAOa,cAAc,cAAeD,IACtEpC,GAAG,aACHsC,kBAAgB,EAChBC,UAAQ,EACRH,MAAOZ,EAAOC,OAAON,YAAcK,EAAOC,OAAON,YAAc,GAC/DqB,cAAe,SAAAC,GAAO,OAAIA,EAAQC,QAAO,SAAAC,GAAM,OAAKnB,EAAOC,OAAON,cAAgBK,EAAOC,OAAON,YAAYyB,MAAK,SAAAC,GAAC,OAAIA,IAAMF,SAC5HF,QAAS/B,EAAWhB,EAAUiB,EAAiCQ,GAC/D2B,YAAa,SAAAC,GAAM,OACf,kBAACC,EAAA,EAAD,iBACQD,EADR,CAEIb,SAAU,gBAAEe,EAAF,EAAEA,OAAF,OAAc3B,EAAQ,CAAEX,UAAW,CAAEG,MAAOmC,EAAOb,UAC7DpC,GAAG,cACHkD,MAAM,cACNC,OAAO,SACPC,QAAQ,WACRC,WAAS,EACTC,WAAU,eAAOP,EAAOO,WAAd,CAA0BC,KAAM,eAGlDC,aAAc,SAACb,GAAD,OACV,kBAAC,IAAMc,SAAP,KACI,yBAAKzD,GAAG,eAAe2C,QAKvC,uBAAGxD,UAAU,qBACT,4BAAQoE,KAAK,SAASpE,UAAU,yCAAhC,cAKhB,kBAAC,EAAD,CACIO,QAASgC,EACT/B,KAAMgC,EACN/B,MAAOA,EACPH,OAAQA","file":"static/js/7.732c3292.chunk.js","sourcesContent":["import { ApolloError } from 'apollo-boost';\nimport React, { ReactNode } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { CircularProgress } from '@material-ui/core';\nimport './RecipesByIngredient.css'\n\ntype RecipesByIngredientProps = {\n    loading: boolean,\n    data: any,\n    error: ApolloError | undefined,\n    called: boolean\n}\n\n\nfunction renderIngredients(title: string, ingredientList: [{original: string}]): ReactNode {\n    return ingredientList.length > 0 && (\n        <div className=\"content has-text-centered\">\n        <strong>{title}</strong>\n        <ul>{ingredientList.map(({original}, i) => <li key={i}><i>{original}</i></li>)}</ul>\n        </div>\n    )\n}\n\nexport default function RecipesByIngredient({ called, loading, data, error }: RecipesByIngredientProps) {\n    return (\n        <div className=\"container has-text-centered\">\n        { called && loading && <CircularProgress size={50} /> }\n        {   \n            data && data.recipesByIngredients.length > 0 && !loading && !error &&\n            <div>{data.recipesByIngredients.map(({ id, title, missedIngredients, usedIngredients }: any, i: number) => {\n                return (\n                    <div key={i} className=\"columns is-centered\">\n                        <div className=\"card recipe-by-ingredient column is-one-third box\">\n                            <header className=\"card-title has-text-centered\">\n                                <NavLink className=\"is-size-5\" to={`/recipe/${id}`}>{title}</NavLink>\n                            </header>\n                            <div className=\"card-content\"> \n                                {renderIngredients('Used Ingredients', usedIngredients)}\n                                {renderIngredients('Missed Ingredients', missedIngredients)}\n                            </div>\n                        </div>\n                    </div>\n                )\n            })}</div>\n        }\n        </div>\n    );\n}\n","import { gql } from 'apollo-boost';\n\nexport const GET_CACHED_INPUT = gql`\n    {\n        ingredients @client\n    }\n`\n\nexport const AUTOCOMPLETE = gql`\n    query Predict($query: String!) {\n        predictIngredient(query: $query) {\n            name\n        }\n    }\n`\n\nexport const SET_CACHE = gql`\n    mutation SetCache(\n        $ingredients: [String!] @client\n    ) {\n        saveIngredients(ingredients: $ingredients) @client\n    }\n`\n\nexport const SEARCH = gql`\n    query getCachedRecipes($ingredients: [String!]!) {\n        recipesByIngredients(ingredients: $ingredients) \n        {\n            id\n            title\n            missedIngredients {original, id, amount, unit}\n            usedIngredients {original, id, amount, unit}\n        }\n    }\n`\n","import React from 'react';\nimport RecipesByIngredient from './recipes_by_ingredient/RecipesByIngredient';\nimport './RecipeSearch.css'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { NavLink } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CACHED_INPUT, SET_CACHE, AUTOCOMPLETE, SEARCH } from './queries'\n\nconst DEFAULT_INGREDIENT_OPTIONS = [\n    'eggs',\n    'ham',\n    'milk',\n];\n\nfunction setOptions(\n    loading: boolean,\n    variables: { query: string },\n    data: { predictIngredient: { name: string }[] }\n): string[] {\n     if (loading) {\n        return [];\n    } else if (data && data.predictIngredient.length > 0) {\n        return data.predictIngredient.map(({name}) => name);\n    }\n    if (variables) {\n        return variables.query.length > 0 ? []: DEFAULT_INGREDIENT_OPTIONS;\n    }\n    return DEFAULT_INGREDIENT_OPTIONS;\n}\n\nfunction RecipeSearch() {\n    const { data } = useQuery(GET_CACHED_INPUT, {\n        onCompleted: cache => cache?.ingredients?.length > 0 && search({variables: { ingredients: cache?.ingredients }})\n    })\n    const [ predict, { data: ingredients, loading, variables } ] = useLazyQuery(AUTOCOMPLETE);\n    const [ search, { loading: loadingRecipes, data: recipes, error, called } ] = useLazyQuery(SEARCH, {\n        onCompleted: () => {\n            updateCache({ variables: formik.values});\n        }\n    });\n    const [ updateCache ] = useMutation(SET_CACHE);\n\n    const formik = useFormik({\n        initialValues: {\n          ingredients: data?.ingredients as string[],\n        },\n        onSubmit: values => {\n            search({variables: values})\n        },\n    });\n\n    return (\n        <section className=\"section\">\n            <h1 className=\"title has-text-centered\">Search for recipes by Ingredients</h1>\n            <div className=\"columns is-centered\">\n                <div className=\"column is-one-third\">\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"\">\n                            <Autocomplete\n                                onChange={(_, value: string[]) => formik.setFieldValue('ingredients', value)}\n                                id=\"ingredient\"\n                                disableClearable\n                                multiple\n                                value={formik.values.ingredients ? formik.values.ingredients : []}\n                                filterOptions={options => options.filter(option => !formik.values.ingredients || !formik.values.ingredients.some(o => o === option))}\n                                options={setOptions(loading, (variables as { query: string }), ingredients)}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        onChange={({target}) => predict({ variables: { query: target.value } })}\n                                        id=\"ingredients\"\n                                        label=\"Ingredients\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        InputProps={{ ...params.InputProps, type: 'search' }}\n                                    ></TextField>\n                                )}\n                                renderOption={(option: any) => (\n                                    <React.Fragment>\n                                        <div id=\"ingredients\">{option}</div>\n                                    </React.Fragment>\n                                )}\n                            />\n                        </div>\n                        <p className=\"has-text-centered\">\n                            <button type=\"submit\" className=\"button is-medium is-fullwidth is-info\">Search</button>\n                        </p>\n                    </form>\n                </div>\n            </div>\n            <RecipesByIngredient\n                loading={loadingRecipes}\n                data={recipes}\n                error={error}\n                called={called}\n            />\n        </section>\n    )\n}\n\nexport default RecipeSearch;\n"],"sourceRoot":""}